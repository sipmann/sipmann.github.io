<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Sipmann - Tools</title><link href="https://www.sipmann.com/en/" rel="alternate"></link><link href="https://www.sipmann.com/feeds/tools.atom.xml" rel="self"></link><id>https://www.sipmann.com/en/</id><updated>2020-12-02T14:00:00-03:00</updated><subtitle></subtitle><entry><title>Apache Nifi JSON to SQL Replacing underscore</title><link href="https://www.sipmann.com/en/apache-nifi-json-to-sql-replacing-underscore.html" rel="alternate"></link><published>2020-12-02T14:00:00-03:00</published><updated>2020-12-02T14:00:00-03:00</updated><author><name>Maurício Camargo Sipmann</name></author><id>tag:www.sipmann.com,2020-12-02:/en/apache-nifi-json-to-sql-replacing-underscore.html</id><summary type="html">&lt;p&gt;Recently I was doing some ETL with Apache NiFi. But after a few minutes of drawing my flow, I saw that the component ConvertJSONToSQL was replacing the underscore ('_') from the field name in the where condition (I was preparing an Update SQL). That was weird because, at the set …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently I was doing some ETL with Apache NiFi. But after a few minutes of drawing my flow, I saw that the component ConvertJSONToSQL was replacing the underscore ('_') from the field name in the where condition (I was preparing an Update SQL). That was weird because, at the set statement, the field name was kept intact. After some research, I found that the property (see bellow) &lt;code&gt;Translate Field Names&lt;/code&gt; was responsible for that weird replacement.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Apache NiFi JSONToSQL config" src="/images/apache_nifi_jsontosql.png"&gt;&lt;/p&gt;
&lt;p&gt;Before setting it to &lt;strong&gt;FALSE&lt;/strong&gt;, be aware that the properties on your JSON data must match exactly the name of your fields.&lt;/p&gt;</content><category term="Tools"></category><category term="Apache Nifi"></category><category term="ConvertJSONToSQL"></category><category term="replacing underscore"></category></entry><entry><title>Using git hooks to easy your life</title><link href="https://www.sipmann.com/en/using_git_hooks_easy_your_life.html" rel="alternate"></link><published>2019-07-30T20:00:00-03:00</published><updated>2019-07-30T20:00:00-03:00</updated><author><name>Maurício Camargo Sipmann</name></author><id>tag:www.sipmann.com,2019-07-30:/en/using_git_hooks_easy_your_life.html</id><summary type="html">&lt;p&gt;Hey folks, it's been a time since my last post. In the meantime, I moved to another state, changed job, and started learning new kinds of stuff. Today I would like to share one thing that I usually do with my small git projects. Git has many cool features, git …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hey folks, it's been a time since my last post. In the meantime, I moved to another state, changed job, and started learning new kinds of stuff. Today I would like to share one thing that I usually do with my small git projects. Git has many cool features, git hooks were one of them. I'll talk about the pre-commit hook today.&lt;/p&gt;
&lt;p&gt;Let's say that, for some reason, you don't have a CI tool/server running after every commit and you want to enforce that every developer runs the tests before every commit? Git pre-commit to the rescue. You can code the hooks with shell, ruby, python, and I could be wrong, but even PHP would work. pre-commit is a client-side hook (we have server side too) and he's located inside the &lt;cite&gt;.git/hooks&lt;/cite&gt; folder. Let's jump to the code... Create a file called 'pre-commit' inside that folder with the following code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
npm &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="c1"&gt;# assuming you&amp;#39;re using it inside a nodeJS project&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Don't forget to make the script executable!! Now break your test and try to commit. That's easy but can save you from breaking the tests at the main CI/Travis/Codeship/etc and being notified by email :). Why not even validate the lint of your project or check if the coverage doesn't fall? Does your team/company have a patter for commit messages? No problem, there is a hook called &lt;cite&gt;commit-msg&lt;/cite&gt; that you can use to validate your message.&lt;/p&gt;
</content><category term="tools"></category><category term="git"></category><category term="shell"></category><category term="pre-commit"></category><category term="hooks"></category></entry></feed>